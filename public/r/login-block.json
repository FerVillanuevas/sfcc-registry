{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "login-block",
  "type": "registry:component",
  "title": "Login Form",
  "description": "A Login Form showing hooks, libs and components.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "label",
    "checkbox"
  ],
  "files": [
    {
      "path": "registry/new-york/login-block/page.tsx",
      "content": "\"use client\";\n\nimport { Banner } from \"@/registry/new-york/login-block/components/banner\";\nimport { LoginForm } from \"@/registry/new-york/login-block/components/login-form\";\nimport { RegisterForm } from \"@/registry/new-york/login-block/components/register-form\";\nimport { TrackOrderForm } from \"@/registry/new-york/login-block/components/track-order-form\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useMediaQuery } from \"@/registry/new-york/login-block/hooks/use-media-query\";\n\nexport default function Home() {\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\n\n  return (\n    <div className=\"min-h-screen\">\n      <Banner />\n\n      <div className=\"flex flex-col items-center justify-center py-12\">\n        <div className=\"max-w-6xl mx-auto px-6 space-y-12\">\n          {/* Login and Register side by side */}\n          <div\n            className={`grid ${\n              isDesktop ? \"grid-cols-2\" : \"grid-cols-1\"\n            } gap-8`}\n          >\n            {/* Login Card */}\n            <Card className=\"border-0 shadow-sm bg-white\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-2xl font-light text-gray-800\">\n                  Sign In\n                </CardTitle>\n                <CardDescription className=\"text-gray-500\">\n                  Access your account and manage your orders\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <LoginForm />\n              </CardContent>\n            </Card>\n\n            {/* Register Card */}\n            <Card className=\"border-0 shadow-sm bg-white\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-2xl font-light text-gray-800\">\n                  Create Account\n                </CardTitle>\n                <CardDescription className=\"text-gray-500\">\n                  Join us for a personalized shopping experience\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <RegisterForm />\n              </CardContent>\n            </Card>\n          </div>\n\n          <Separator className=\"my-8 bg-gray-200\" />\n\n          {/* Order Tracking at the bottom */}\n          <div className=\"max-w-md mx-auto\">\n            <Card className=\"border-0 shadow-sm bg-white\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-2xl font-light text-gray-800\">\n                  Track Your Order\n                </CardTitle>\n                <CardDescription className=\"text-gray-500\">\n                  Check the status of your recent purchase\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <TrackOrderForm />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/pages/Login/page.tsx"
    },
    {
      "path": "registry/new-york/login-block/components/banner.tsx",
      "content": "export function Banner() {\n  return (\n    <div className=\"w-full bg-white border-b border-gray-100\">\n      <div className=\"container py-16 max-w-6xl mx-auto\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-light text-gray-800 mb-3 tracking-tight\">Welcome</h1>\n          <p className=\"text-gray-500 max-w-md mx-auto text-lg\">\n            Sign in to your account, create a new one, or check your order status\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/login-block/components/login-form.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nimport {\n  type LoginFormValues,\n  loginSchema,\n} from \"@/registry/new-york/login-block/lib/auth-schema\";\n\nexport function LoginForm() {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      loginEmail: \"\",\n      loginPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormValues) => {\n    // Simulate API call\n    console.log(\"Login form submitted\", data);\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    // Handle login logic here\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-5\">\n        <FormField\n          control={form.control}\n          name=\"loginEmail\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email Address</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"loginPassword\"\n          render={({ field }) => (\n            <FormItem>\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>Password</FormLabel>\n                <a\n                  href=\"#\"\n                  className=\"text-sm text-gray-500 hover:text-gray-700\"\n                >\n                  Forgot password?\n                </a>\n              </div>\n              <FormControl>\n                <div className=\"relative\">\n                  <Input\n                    {...field}\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"••••••••\"\n                    className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-gray-600\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                  </Button>\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button\n          type=\"submit\"\n          className=\"w-full bg-gray-900 hover:bg-gray-800 text-white mt-6\"\n          disabled={form.formState.isSubmitting}\n        >\n          {form.formState.isSubmitting ? \"Signing In...\" : \"Sign In\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/login-block/components/register-form.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Eye, EyeOff } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\"\nimport { type RegisterFormValues, registerSchema } from \"@/registry/new-york/login-block/lib/auth-schema\"\n\nexport function RegisterForm() {\n  const [showPassword, setShowPassword] = useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n\n  const form = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      csrf_token: \"LxdKyzT9r7fc_DQrt0gvdkgrziY9pjQUYzM0ORSF\",\n      dwfrm_profile_customer_firstname: \"\",\n      dwfrm_profile_customer_lastname: \"\",\n      dwfrm_profile_customer_phone: \"\",\n      dwfrm_profile_customer_email: \"\",\n      dwfrm_profile_customer_emailconfirm: \"\",\n      dwfrm_profile_login_password: \"\",\n      dwfrm_profile_login_passwordconfirm: \"\",\n      dwfrm_profile_customer_addtoemaillist: false,\n    },\n  })\n\n  const onSubmit = async (data: RegisterFormValues) => {\n    // Simulate API call\n    console.log(\"Registration form submitted\", data)\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    // Handle registration logic here\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-5\">\n        <input type=\"hidden\" name=\"csrf_token\" value={form.getValues(\"csrf_token\")} />\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"dwfrm_profile_customer_firstname\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>First Name</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    placeholder=\"First Name\"\n                    className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"dwfrm_profile_customer_lastname\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Last Name</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    placeholder=\"Last Name\"\n                    className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"dwfrm_profile_customer_phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Phone Number</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  type=\"tel\"\n                  placeholder=\"Phone Number\"\n                  className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"dwfrm_profile_customer_email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"dwfrm_profile_customer_emailconfirm\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirm Email</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"dwfrm_profile_login_password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <div className=\"relative\">\n                  <Input\n                    {...field}\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"••••••••\"\n                    className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-gray-600\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                  </Button>\n                </div>\n              </FormControl>\n              <FormDescription>\n                Must contain at least 8 characters with uppercase, lowercase, number, and special character.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"dwfrm_profile_login_passwordconfirm\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirm Password</FormLabel>\n              <FormControl>\n                <div className=\"relative\">\n                  <Input\n                    {...field}\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"••••••••\"\n                    className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-gray-600\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                  </Button>\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"dwfrm_profile_customer_addtoemaillist\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-start space-x-2 space-y-0 pt-1\">\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                  className=\"text-gray-800 border-gray-300 data-[state=checked]:bg-gray-800\"\n                />\n              </FormControl>\n              <div className=\"space-y-1 leading-none\">\n                <FormLabel className=\"text-sm font-normal text-gray-600\">\n                  Subscribe to our newsletter for exclusive offers\n                </FormLabel>\n              </div>\n            </FormItem>\n          )}\n        />\n\n        <Button\n          type=\"submit\"\n          className=\"w-full bg-gray-900 hover:bg-gray-800 text-white mt-6\"\n          disabled={form.formState.isSubmitting}\n        >\n          {form.formState.isSubmitting ? \"Creating Account...\" : \"Create Account\"}\n        </Button>\n      </form>\n    </Form>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/login-block/components/track-order-form.tsx",
      "content": "\"use client\"\n\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"\nimport { type TrackOrderFormValues, trackOrderSchema } from \"@/registry/new-york/login-block/lib/auth-schema\"\n\nexport function TrackOrderForm() {\n  const form = useForm<TrackOrderFormValues>({\n    resolver: zodResolver(trackOrderSchema),\n    defaultValues: {\n      trackOrderNumber: \"\",\n      trackOrderEmail: \"\",\n      trackOrderPostal: \"\",\n    },\n  })\n\n  const onSubmit = async (data: TrackOrderFormValues) => {\n    // Simulate API call\n    console.log(\"Order tracking form submitted\", data)\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n    // Handle order tracking logic here\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-5\">\n        <FormField\n          control={form.control}\n          name=\"trackOrderNumber\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Order Number</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  placeholder=\"Enter your order number\"\n                  className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"trackOrderEmail\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email Address</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  type=\"email\"\n                  placeholder=\"Email used for order\"\n                  className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"trackOrderPostal\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Postal Code</FormLabel>\n              <FormControl>\n                <Input\n                  {...field}\n                  placeholder=\"Shipping postal code\"\n                  className=\"border-gray-200 focus:border-gray-300 focus:ring-gray-200\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button\n          type=\"submit\"\n          className=\"w-full bg-gray-900 hover:bg-gray-800 text-white mt-6\"\n          disabled={form.formState.isSubmitting}\n        >\n          {form.formState.isSubmitting ? \"Tracking...\" : \"Track Order\"}\n        </Button>\n      </form>\n    </Form>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/login-block/lib/auth-schema.ts",
      "content": "import * as z from \"zod\"\n\n// Login form schema\nexport const loginSchema = z.object({\n  loginEmail: z.string().email({ message: \"Please enter a valid email address\" }),\n  loginPassword: z.string().min(1, { message: \"Password is required\" }),\n})\n\nexport type LoginFormValues = z.infer<typeof loginSchema>\n\n// Registration form schema\nexport const registerSchema = z\n  .object({\n    csrf_token: z.string(),\n    dwfrm_profile_customer_firstname: z.string().min(1, { message: \"First name is required\" }),\n    dwfrm_profile_customer_lastname: z.string().min(1, { message: \"Last name is required\" }),\n    dwfrm_profile_customer_phone: z\n      .string()\n      .min(10, { message: \"Phone number must be at least 10 digits\" })\n      .regex(/^\\d+$/, { message: \"Phone number must contain only digits\" }),\n    dwfrm_profile_customer_email: z.string().email({ message: \"Please enter a valid email address\" }),\n    dwfrm_profile_customer_emailconfirm: z.string().email({ message: \"Please enter a valid email address\" }),\n    dwfrm_profile_login_password: z\n      .string()\n      .min(8, { message: \"Password must be at least 8 characters\" })\n      .regex(/[A-Z]/, { message: \"Password must contain at least one uppercase letter\" })\n      .regex(/[a-z]/, { message: \"Password must contain at least one lowercase letter\" })\n      .regex(/[0-9]/, { message: \"Password must contain at least one number\" })\n      .regex(/[^A-Za-z0-9]/, { message: \"Password must contain at least one special character\" }),\n    dwfrm_profile_login_passwordconfirm: z.string(),\n    dwfrm_profile_customer_addtoemaillist: z.boolean().optional(),\n  })\n  .refine((data) => data.dwfrm_profile_customer_email === data.dwfrm_profile_customer_emailconfirm, {\n    message: \"Email addresses do not match\",\n    path: [\"dwfrm_profile_customer_emailconfirm\"],\n  })\n  .refine((data) => data.dwfrm_profile_login_password === data.dwfrm_profile_login_passwordconfirm, {\n    message: \"Passwords do not match\",\n    path: [\"dwfrm_profile_login_passwordconfirm\"],\n  })\n\nexport type RegisterFormValues = z.infer<typeof registerSchema>\n\n// Order tracking form schema\nexport const trackOrderSchema = z.object({\n  trackOrderNumber: z.string().min(1, { message: \"Order number is required\" }),\n  trackOrderEmail: z.string().email({ message: \"Please enter a valid email address\" }),\n  trackOrderPostal: z.string().min(5, { message: \"Please enter a valid postal code\" }),\n})\n\nexport type TrackOrderFormValues = z.infer<typeof trackOrderSchema>\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/new-york/login-block/hooks/use-media-query.ts",
      "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\n\nexport function useMediaQuery(query: string): boolean {\n  const [matches, setMatches] = useState(false)\n\n  useEffect(() => {\n    const media = window.matchMedia(query)\n    if (media.matches !== matches) {\n      setMatches(media.matches)\n    }\n\n    const listener = () => setMatches(media.matches)\n    media.addEventListener(\"change\", listener)\n\n    return () => media.removeEventListener(\"change\", listener)\n  }, [matches, query])\n\n  return matches\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/login-block/hooks/use-mobile.tsx",
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "type": "registry:hook"
    }
  ]
}